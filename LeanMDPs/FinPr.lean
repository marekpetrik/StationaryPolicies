import Mathlib.Data.Nat.Defs
import Mathlib.Data.Real.Basic 
import Mathlib.Data.NNReal.Basic


import Mathlib.Data.Finset.Image
import Mathlib.Logic.Function.Defs -- Function.Injective

universe u

open NNReal

variable {œÑ œÑ‚ÇÅ œÑ‚ÇÇ: Type u} 

#check Finset.sum_mul_sum

/--
Finite probability space
-/
structure FinP {œÑ : Type u} (Œ© : Finset œÑ): Type u where
  p : Œ© ‚Üí ‚Ñù‚â•0
  sumsto : (‚àë œâ : Œ©, p œâ ) = 1


--lemma := (Finset.mem_product.mp q).left

-- functions that translate memberships from product to individual sets
-- TODO: find suitable library replacements?
lemma inset‚ÇÅ {Œ± Œ≤ : Type u} {p : Œ± √ó Œ≤} {s : Finset Œ±} {t : Finset Œ≤} : 
                  p ‚àà s √óÀ¢ t ‚Üí p.1 ‚àà s := fun q ‚Ü¶ (Finset.mem_product.mp q).left
lemma inset‚ÇÇ {Œ± Œ≤ : Type u} {p : Œ± √ó Œ≤} {s : Finset Œ±} {t : Finset Œ≤} : 
                  p ‚àà s √óÀ¢ t ‚Üí p.2 ‚àà t := fun q ‚Ü¶ (Finset.mem_product.mp q).right
-- bijection between tuple and attached tuple                  
def inprod {s : Finset œÑ‚ÇÅ} {t : Finset œÑ‚ÇÇ} 
              (x : s √óÀ¢ t) :  {x : œÑ‚ÇÅ // x ‚àà s} √ó {y : œÑ‚ÇÇ // y ‚àà t} :=
     ‚ü® ‚ü®x.1.1, inset‚ÇÅ x.2‚ü©, ‚ü®x.1.2, inset‚ÇÇ x.2‚ü© ‚ü©
def outprod {s : Finset œÑ‚ÇÅ} {t : Finset œÑ‚ÇÇ} 
              (x :  {x : œÑ‚ÇÅ // x ‚àà s} √ó {y : œÑ‚ÇÇ // y ‚àà t}) : (s √óÀ¢ t) :=
   ‚ü® ‚ü®x.1.1, x.2.1‚ü©, Finset.mk_mem_product x.1.2 x.2.2‚ü©
lemma linv_inprod_outprod {s : Finset œÑ‚ÇÅ} {t : Finset œÑ‚ÇÇ} : 
          ‚àÄ x : {x : œÑ‚ÇÅ // x ‚àà s} √ó {y : œÑ‚ÇÇ // y ‚àà t}, inprod (outprod x) = x := fun _ ‚Ü¶ rfl
lemma linv_outprod_inprod {s : Finset œÑ‚ÇÅ} {t : Finset œÑ‚ÇÇ} : 
          ‚àÄ x : s √óÀ¢ t, outprod (inprod x) = x := fun _ ‚Ü¶ rfl


theorem sum_product_in (s : Finset œÑ‚ÇÅ) (t : Finset œÑ‚ÇÇ) 
        (f : {x:œÑ‚ÇÅ // x‚ààs} √ó {y:œÑ‚ÇÇ // y‚ààt} ‚Üí ‚Ñù‚â•0) :
    ‚àë x : s √óÀ¢ t, f (inprod x) = ‚àë x : s, ‚àë y : t, f (x, y) := 
       calc
            ‚àë x : s √óÀ¢ t, f (inprod x) = ‚àë x ‚àà s.attach √óÀ¢ t.attach, f x :=  by sorry
            _ = ‚àë x : s, ‚àë y : t, f (x, y) := Finset.sum_product s.attach t.attach f

--      (Finset.sum_bijective ?e ?he (fun x ‚Ü¶ ‚àë y : { x // x ‚àà t }, f (x, y)) (fun x ‚Ü¶ f (inprod x)) ?h)

#check Finset.sum_bij
#check Finset.Injective
 

 --prod_finset_product (s √óÀ¢ t) s (fun _a => t) fun _p => mem_product
  
/--
Product of a probability distribution with a dependent probability 
distributions is a probability distribution. 
-/
lemma prob_prod_prob {T‚ÇÅ : Finset œÑ‚ÇÅ} {T‚ÇÇ : Finset œÑ‚ÇÇ} 
      (f : T‚ÇÅ ‚Üí ‚Ñù‚â•0) (g : T‚ÇÅ ‚Üí T‚ÇÇ ‚Üí ‚Ñù‚â•0) 
      (h1 : ‚àë t‚ÇÅ : T‚ÇÅ, f t‚ÇÅ = 1)  
      (h2 : ‚àÄ t‚ÇÅ : T‚ÇÅ,  ‚àë t‚ÇÇ : T‚ÇÇ, g t‚ÇÅ t‚ÇÇ = 1) : 
      (‚àë ‚ü®‚ü®t‚ÇÅ,t‚ÇÇ‚ü©,q‚ü© : (T‚ÇÅ √óÀ¢ T‚ÇÇ), (f ‚ü®t‚ÇÅ,inset‚ÇÅ q‚ü©) * (g ‚ü®t‚ÇÅ,inset‚ÇÅ q‚ü© ‚ü®t‚ÇÇ, inset‚ÇÇ q‚ü©) ) = 1  :=
      calc
        ‚àë ‚ü®‚ü®t‚ÇÅ,t‚ÇÇ‚ü©,q‚ü© : (T‚ÇÅ √óÀ¢ T‚ÇÇ), (f ‚ü®t‚ÇÅ,inset‚ÇÅ q‚ü©)*(g ‚ü®t‚ÇÅ, inset‚ÇÅ q‚ü© ‚ü®t‚ÇÇ, inset‚ÇÇ q‚ü©) 
        = ‚àë t‚ÇÅ : T‚ÇÅ, ‚àë t‚ÇÇ : T‚ÇÇ, (f t‚ÇÅ)*(g t‚ÇÅ t‚ÇÇ) := 
                 Finset.sum_product T‚ÇÅ T‚ÇÇ fun ‚ü®a,b‚ü© ‚Ü¶ f a * g a b 

/-
    have h3 : ‚àÄ t‚ÇÅ : T‚ÇÅ, 
                (‚àë t‚ÇÇ : T‚ÇÇ, (f t‚ÇÅ)*(g t‚ÇÅ t‚ÇÇ) 
                = (f t‚ÇÅ) * (‚àë t‚ÇÇ : T‚ÇÇ, (g t‚ÇÅ t‚ÇÇ)) ) := 
        fun t‚ÇÅ ‚Ü¶ Eq.symm (Finset.mul_sum T‚ÇÇ.attach (fun t‚ÇÇ ‚Ü¶ g t‚ÇÅ t‚ÇÇ) (f t‚ÇÅ))
    calc 
        ‚àë ‚ü®t‚ÇÅ,t‚ÇÇ‚ü© : (T‚ÇÅ √óÀ¢ T‚ÇÇ), (f t‚ÇÅ)*(g t‚ÇÅ t‚ÇÇ) 
        = ‚àë t‚ÇÅ ‚àà T‚ÇÅ, ‚àë t‚ÇÇ ‚àà T‚ÇÇ, (f t‚ÇÅ)*(g t‚ÇÅ t‚ÇÇ) := 
                 Finset.sum_product T‚ÇÅ T‚ÇÇ fun x ‚Ü¶ f x.1 * g x.1 x.2 
        _ = ‚àë t‚ÇÅ ‚àà T‚ÇÅ, (f t‚ÇÅ) * (‚àë t‚ÇÇ ‚àà T‚ÇÇ, (g t‚ÇÅ t‚ÇÇ)) := Finset.sum_congr rfl h3
        _ = ‚àë t‚ÇÅ ‚àà T‚ÇÅ, (f t‚ÇÅ) * 1 := 
                 Finset.sum_congr rfl (fun x a ‚Ü¶ congrArg (fun y ‚Ü¶ (f x)*y) (h2 x a))
        _ = ‚àë a ‚àà T‚ÇÅ, (f a) := by ring_nf
        _ = 1 := h1
-/
#check Finset.mul_sum

/--
Constructs a probability space as a product of a probability 
space and a dependent probability space.
-/
def FinP.product_dep {Œ©‚ÇÅ : Finset œÑ‚ÇÅ}
    (P‚ÇÅ : FinP Œ©‚ÇÅ) (Œ©‚ÇÇ : Finset œÑ‚ÇÇ) (p : Œ©‚ÇÅ ‚Üí Œ©‚ÇÇ ‚Üí ‚Ñù‚â•0) 
    (h1: ‚àÄœâ‚ÇÅ : Œ©‚ÇÅ, (‚àë œâ‚ÇÇ : Œ©‚ÇÇ, p œâ‚ÇÅ œâ‚ÇÇ) = 1) :
    FinP (Œ©‚ÇÅ √óÀ¢ Œ©‚ÇÇ) := 
  {p := fun ‚ü®‚ü®œâ‚ÇÅ,œâ‚ÇÇ‚ü©,q‚ü© ‚Ü¶  
            P‚ÇÅ.p ‚ü®œâ‚ÇÅ, inset‚ÇÅ q‚ü© * p ‚ü®œâ‚ÇÅ, inset‚ÇÅ q‚ü© ‚ü®œâ‚ÇÇ, inset‚ÇÇ q‚ü©,
   sumsto := prob_prod_prob P‚ÇÅ.p p P‚ÇÅ.sumsto h1}
   

--def FinP.image {Œ© : Finset œÑ} (P : FinP Œ©) (f : œÑ ‚Ü™ œÑ‚ÇÅ) : (FinP (Œ©.map f)) := 
--               {p := fun t‚ÇÅ ‚Ü¶ }

-- class ‚Ñô 
-- class ùîº 


#check Finset.sum
#check Finset.product
#check Finset.mem_product
#check And
#check Finset.sum_product
